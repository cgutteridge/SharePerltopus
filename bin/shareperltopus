#!/usr/bin/perl 

use strict;
use warnings;

use FindBin;
use lib "$FindBin::Bin/../perl-lib";

use Data::Dumper;
use Time::Local;
use SharePoint::Connection;
use SharePoint::CommandLine;

my %opts = SharePoint::CommandLine->get_options( 
	{ 
		fields=>"",
		list=>"",
		view=>"",
		item=>"",
		group=>"",
		url=>"",
		title=>"",
	}, 
	{ 
		"fields-file:s" => "fields",
		"list:s" => "list",
		"view:s" => "view",
		"item:s" => "item",
		"group:s" => "group",
		"url:s" => "url",
		"title:s" => "title",
	} 
);
my( $action ) = @ARGV;

if( !defined $action )
{
	print STDERR usage();	
	die "No action specified";
}

binmode( STDOUT, ":utf8" );

$opts{"fields-list"} = [];
if( $opts{fields} ne "" )
{
	open( F, $opts{fields} ) || die "can't read '$opts{fields}': $!";
	while( my $line = <F> )
	{
		chomp $line;
		push @{$opts{"fields-list"}}, $line;
	}
	close F;
}

my $spc = new SharePoint::Connection( %opts );

if( $action eq "list-to-tsv" )
{
	action_list_to_tsv( $spc, %opts );
}
elsif( $action eq "list-dump" )
{
	action_list_dump( $spc, %opts );
}
elsif( $action eq "calendar-to-ical" )
{
	action_calendar_to_ical( $spc, %opts );
}
elsif( $action eq "collections" )
{
	action_collections( $spc, %opts );
}
elsif( $action eq "webs" )
{
	action_webs( $spc, %opts );
}
elsif( $action eq "list-info" )
{
	action_list_info( $spc, %opts );
}
elsif( $action eq "list-fields" )
{
	action_list_fields( $spc, %opts );
}
elsif( $action eq "get-item" )
{
	action_get_item( $spc, %opts );
}
elsif( $action eq "attachment-collection" )
{
	action_attachment_collection( $spc, %opts );
}
elsif( $action eq "group-collection" )
{
	action_group_collection( $spc, %opts );
}
elsif( $action eq "group-members" )
{
	action_group_members( $spc, %opts );
}
else
{
	print STDERR "Unknown action: $action\n\n";
	print STDERR usage();

	exit 1;
}
exit;

sub usage
{
	return <<END
All commands also require --credentials 

shareperltopus collections --site <site-url>
shareperltopus webs --site <site-url>
shareperltopus list-info --site <site-url> --list <list-id>
shareperltopus list-dump --site <site-url> --list <list-id> [--view <view>]
shareperltopus list-fields --site <site-url> --list <list-id> 
shareperltopus list-to-tsv --site <site-url> --list <list-id> [--fields-file <file>] [--view <view>]
shareperltopus calendar-to-ical --site <site-url> --list <list-id> [--view <view>] [--title <title>]

shareperltopus group-collection --site <site-url> 
shareperltopus group-members --site <site-url> --group <group-name>
END
}

sub action_list_info
{
	my( $spc, %opts ) = @_;

	if( $opts{list} eq "" ) { die "list-to-tsv needs --list to be set"; }
	my $map = {};
	my $listinfo = $spc->GetList( $opts{list} );
	
	print Dumper( $listinfo );
}

sub action_group_collection
{
	my( $spc, %opts ) = @_;

	my @result = $spc->GetGroupCollectionFromSite();
	foreach my $data ( sort { $a->{ID} <=> $b->{ID} } @result) 
	{
		print $data->{ID}." - ".$data->{Name}."\n";
	}
}
sub action_group_members
{
	my( $spc, %opts ) = @_;

	if( $opts{group} eq "" ) { die "group-members needs --group to be set"; }

	my @result = $spc->GetUserCollectionFromGroup( $opts{group} );
	foreach my $data ( @result) 
	{
		print $data->{LoginName}." - ".$data->{Email}." - ".$data->{Name}."\n";
	}
}

sub action_collections
{
	my( $spc, %opts ) = @_;

	my @result = $spc->GetListCollection();
	foreach my $data ( @result ) 
	{
		print $data->{ID}." - ".$data->{Title}."\n";
	}
}

sub action_webs
{
	my( $spc, %opts ) = @_;

	my @result = $spc->GetWebCollection();
	foreach my $data ( @result ) 
	{
		print $data->{Url}." - ".$data->{Title}."\n";
	}
}

sub action_get_item
{
	my( $spc, %opts ) = @_;

	if( $opts{url} eq "" ) { die "attachment-collection needs --url to be set"; }

	my $item = $spc->GetItem( $opts{url} );
	print $item;
}

sub action_attachment_collection
{
	my( $spc, %opts ) = @_;

	if( $opts{list} eq "" ) { die "attachment-collection needs --list to be set"; }
	if( $opts{item} eq "" ) { die "attachment-collection needs --item to be set"; }
	my $map = {};
	my $listinfo = $spc->GetAttachmentCollection( $opts{list}, $opts{item} );
}

sub action_list_fields
{
	my( $spc, %opts ) = @_;

	if( $opts{list} eq "" ) { die "list-fields needs --list to be set"; }
	my $map = {};
	my $listinfo = spc->GetList( $opts{list} );
	foreach my $field ( @{$listinfo->{fields}} )
	{
		print sprintf( "%34s: %s\n", $field->{StaticName}, $field->{DisplayName} );
	}
}

sub action_list_dump
{
	my( $spc, %opts ) = @_;

	if( $opts{list} eq "" ) { die "list-to-tsv needs --list to be set"; }
	my $map = {};
	
	if( $opts{view} eq "" ) { delete $opts{view}; }
	my @items = $spc->GetListItems( $opts{list}, $opts{view} );
	print Dumper(\@items);
}

sub action_list_to_tsv
{
	my( $spc, %opts ) = @_;

	if( $opts{list} eq "" ) { die "list-to-tsv needs --list to be set"; }
	my $map = {};
	my $listinfo = $spc->GetList( $opts{list} );
	my $formats = {};
	foreach my $field ( @{$listinfo->{fields}} )
	{
		$map->{"ows_".$field->{StaticName}} = $field->{DisplayName};
		$formats->{"ows_".$field->{StaticName}} = $field->{Format} || "none";
	}
	if( $opts{view} eq "" ) { delete $opts{view}; }

	my @items = $spc->GetListItems( $opts{list}, $opts{view} );

	my @fields = @{ $opts{"fields-list"} };
	if( !scalar @fields )
	{
		my $f={};
		foreach my $item ( @items )
		{
			CELL: foreach my $k ( sort keys %{$item} )
			{
				next CELL unless defined $map->{$k};
				$f->{$map->{$k}} = 1;
			}
		}
		@fields = sort keys %$f;
	}
	
	my $output = join( "\t", @fields );
	$output =~ s/\n/\\n/g;
	print $output."\n";
	foreach my $item ( @items )
	{
		my $cells = {};
		CELL: foreach my $k ( sort keys %{$item} )
		{
			next CELL unless defined $map->{$k};
			my $v = $item->{$k};
			my $name = $map->{$k};
			$v =~ s/^.*;#//;
			# url & email fields need more cleaning, but for now:
			# mailto:hs8@soton.ac.uk, hs8@soton.ac.uk
			if( $formats->{$k} eq "Hyperlink" )
			{
				$v=~s/^([^,]*),.*$/$1/;
			}

			$cells->{$name} = $v;
		}
		my @values = ();
		foreach my $cell_name ( @fields )
		{
			my $v = $cells->{$cell_name};
			$v = "" unless defined $v;
			push @values, $v;
		}
		my $output = join( "\t", @values );
		$output =~ s/\n/\\n/g;
		print $output."\n";
	}
#print Dumper( $formats );
}

sub action_calendar_to_ical
{
	my( $spc, %opts ) = @_;

	if( $opts{list} eq "" ) { die "list_to_tsv needs --list to be set"; }
	my $map = {};
	my $listinfo = $spc->GetList( $opts{list} );
	foreach my $field ( @{$listinfo->{fields}} )
	{
		$map->{$field->{DisplayName}} = "ows_".$field->{StaticName};
	}
	# always use real title
	$map->{"Title"}="ows_Title"; 
	if( $opts{view} eq "" ) { delete $opts{view}; }

	my @items = $spc->GetCalendarEvents( $opts{list}, $opts{view} );

	my @fields = ("Start Time", "End Time", "Title", "Description", "Unique Id");

	my $title = "Sharepoint Calendar";
	if( $opts{title} ne "" ) { $title=$opts{title}; }

	print "BEGIN:VCALENDAR\r\nVERSION:2.0\r\nPRODID:-//SOTON//Sharepoint Calendar Fields//EN\r\nMETHOD:PUBLISH\r\nX-WR-CALNAME:$title\r\nX-WR-CALDESC:$title\r\nX-WR-TIMEZONE:Europe/London\r\n";

	foreach my $item ( @items )
	{
		print "BEGIN:VEVENT\r\n";
		my @start = split(/[- :]/, $item->{$map->{'Start Time'}});
		my @end = split(/[- :]/, $item->{$map->{'End Time'}});
		# work out if this is a all day event, which sharepoint
		# exports as 000000 to 235900. If so make it an ics all day
		if( $start[3].$start[4].$start[5] eq "000000"
		 && $end[3].$end[4].$end[5] eq "235900" )
		{
			my $end_date_t = timelocal(0,0,0,$end[2],$end[1]-1,$end[0]-1900);
			$end_date_t += 24*60*60;
			my @end_date = localtime( $end_date_t );
			printf( "DTSTART;TZID=Europe/London;VALUE=DATE:%04d%02d%02d\r\n", @start );
			printf( "DTEND;TZID=Europe/London;VALUE=DATE:%04d%02d%02d\r\n", $end_date[5]+1900,$end_date[4]+1,$end_date[3]);
		}
		else
		{
			printf( "DTSTART;TZID=Europe/London:%04d%02d%02dT%02d%02d%02d\r\n", @start );
			printf( "DTEND;TZID=Europe/London:%04d%02d%02dT%02d%02d%02d\r\n", @end);
		}
		if ( !defined($item->{$map->{'Title'}}) ) { $item->{$map->{'Title'}} = "No Summary"; }
		print "SUMMARY:".$item->{$map->{'Title'}}."\r\n";
		if ( !defined($item->{$map->{'Description'}}) ) { $item->{$map->{'Description'}} = "No Description"; }
		print "DESCRIPTION:".$item->{$map->{'Description'}}."\r\n";
		if ( defined($item->{$map->{'Location'}}) ) { print "LOCATION:".$item->{$map->{'Location'}}."\r\n"; }
		print "END:VEVENT\r\n";
	}

	print "END:VCALENDAR\r\n";
}
